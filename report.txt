Assignment 3 Report

Name: Yao Fan

1. What I turned in, what it does, and how to run it

Replace this text with a list of Python files in your submission other
than create_baseline_features.py and create_advanced_features.py. What
do these files do and how do you run them? If you included
hw3_corpus_tool.py and modified it in some way then also answer the
questions for hw3_corpus_tool.py. If there are any special
instructions for create_baseline_features.py and
create_advanced_features.py, please include those too.

hw3_corpus_tool.py

create_baseline_features.py
swbdDAMSL.crfsuite.baseline.model
swbdDAMSL.crfsuite.baseline.out

create_advanced_features.py
swbdDAMSL.crfsuite.advanced.model
swbdDAMSL.crfsuite.advanced.out

all_data_advanced.sh
all_data_baseline.sh

These two shell scripts automatically uses main.py to create the training file for CRFSuite, run CRFSuite to learn,
and then tag.

I put most of the code of utility tools in main.py.

If you run the Python file without any parameters, you would get this in your terminal:

$ python3 main.py
how to use this program?
python3 main.py convert path_to_a_directory_of_csv_files
python3 main.py convert_advanced path_to_a_directory_of_csv_files
python3 main.py split train.crfsuite.txt 75
python3 main.py split_directory path_to_directory 75
python3 main.py create_crf_input baseline file_name
python3 main.py create_crf_input advanced file_name
python3 main.py calculate one_output_file_generated_by_CRFsuite
python3 main.py diff output_by_CRFsuite

python3 main.py convert ./data/train/

this creates a training file with baseline features in the current directory.

python3 main.py convert_advanced ./data/train/

this creates a training file with advanced features in the current directory.

python3 main.py split_directory ./data/train/ 75

this randomly selects 75% of the files in the training data set, and creates a file in the current directory
which contains the 75% for training. It also creates another file which contains the other 25% for testing purpose.

python3 main.py create_crf_input baseline split_75_training.txt > split_75_training.baseline

this reads all the file names from the file split_75_training.txt, and outputs the baseline features to STDOUT. Then the output
will be redirected to split_75_training.baseline

python3 main.py create_crf_input advanced split_75_training.txt > split_75_training.advanced

this reads all the file names from the file split_75_training.txt, and outputs the advanced features to STDOUT. Then
the output will be redirected to split_75_training.advanced

python3 main.py calculate split_75_training.baseline.out

if the output file by CRFSuite contains an actual label and a predicted label in a row, this will calculate the accuracy.


2. How I evaluated my baseline and advanced features

I firstly read all the data to the memory and evaluated the accuracy, but I found out that it was not good. Then I
split 75% of the training files, and used the other 25% for testing. And I got a better performance.

3. Description of advanced feature set

Replace this text with a description of your advanced feature set.

bi-grams, tri-grams. I used them in the advanced feature set. They are something like POS_VBP|POS_VBP TOKEN_I|TOKEN_don.


4. How I developed my advanced feature set

Replace this text with a description of how you developed the advanced
feature set. If you tried other feature sets with lower accuracies, be
sure to mention that.

In every iteration, I added bi-gram part of speeches and also tri-gram part of speeches.

In advanced feature set, I added certain pattern to detect if the current utterance is sd, sv, x. Basically, the program
understands the utterance a little bit and outputs a result with a better performance.

Some trials were actually reducing the accuracy. But I changed it later to make it get better.

5. Results

Accuracy of baseline features: 72.82987426147554%
Accuracy of advanced features: 74.15117574620301%

6. Additional information about the assignment

Not applicable (replace this text as necessary).